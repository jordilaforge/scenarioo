/*
 * Gets the version name from the latest Git tag
 * From: http://ryanharter.com/blog/2013/07/30/automatic-versioning-with-git-and-gradle/
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
		classpath 'com.moowork.gradle:gradle-node-plugin:0.4'
        classpath 'com.moowork.gradle:gradle-grunt-plugin:0.5'
    }
}

allprojects {
	group = 'org.scenarioo'
    version = getVersionName()
    tasks.withType(JavaCompile) {
	    sourceCompatibility = "1.6"
	    targetCompatibility = "1.6"
	}
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
}

configure([project(":scenarioo-server"), project(":scenarioo-docu-generation-example")]) {
    apply plugin: 'eclipse'
    apply plugin: 'java'

	configurations {
	  compileOnly
	}

	repositories {
		maven {
         	url "https://raw.github.com/scenarioo/mvn-repo/master"
        }
	    mavenCentral()
	}

	ext.scenariooApiVersion = '2.0.1-SNAPSHOT'

	dependencies {
		compile 'org.scenarioo:scenarioo-java:' + ext.scenariooApiVersion
	    compile 'org.apache.commons:commons-lang3:3.0.1'
	    compile 'commons-io:commons-io:1.3.2'
	    compile 'commons-codec:commons-codec:1.2'
	    compile 'log4j:log4j:1.2.17'
	    testCompile 'junit:junit:4.11'
	}

	//Include compileOnly for compilation
	sourceSets.main.compileClasspath += configurations.compileOnly


	// optional: if using 'eclipse' plugin
	eclipse {
		classpath {
			plusConfigurations += configurations.compileOnly
		}
	}
}

project(':scenarioo-docu-generation-example') {
    dependencies {
    }
}

project(':scenarioo-server') {
    dependencies {
    }
}

task wrapper(type: Wrapper) {
}
